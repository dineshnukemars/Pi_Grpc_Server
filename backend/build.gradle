apply plugin: "kotlin"
apply plugin: "com.google.protobuf"

// Generate IntelliJ IDEA's .idea & .iml project files.
// protobuf-gradle-plugin automatically registers *.proto and the gen output files
// to IntelliJ as sources.
// For best results, install the Protobuf and Kotlin plugins for IntelliJ.
apply plugin: "idea"
apply plugin: "application"

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
    // This repo
    implementation "io.grpc:grpc-kotlin-stub:$grpc_kotlin_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    // Grpc and Protobuf
    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.google.protobuf:protobuf-java-util:$protobuf_version"
    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"

    // Java
    compileOnly "javax.annotation:javax.annotation-api:1.2"

    // Google
    implementation "com.google.guava:guava:28.2-jre"

    implementation group: 'com.pi4j', name: 'pi4j-core', version: '1.2'
    implementation group: 'com.diozero', name: 'diozero-provider-pi4j', version: '0.11'
    implementation group: 'com.diozero', name: 'diozero-core', version: '0.11'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:$protobuf_version" }
    plugins {
        // Specify protoc to generate using kotlin protobuf plugin
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
        // Specify protoc to generate using our grpc kotlin plugin
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:$grpc_kotlin_version"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc { }
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt { }
            }
        }
    }
}


startScripts.enabled = false

task piAccessClient(type: CreateStartScripts) {
    mainClassName = "com.sky.backend.grpc.pi.PiAccessClientKt"
    applicationName = "Pi_Access_Client"
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

task piAccessServer(type: CreateStartScripts) {
    mainClassName = "com.sky.backend.grpc.pi.PiAccessServerKt"
    applicationName = "backend"
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

applicationDistribution.into("bin") {
    from(piAccessClient)
    from(piAccessServer)
    fileMode = 0755
}